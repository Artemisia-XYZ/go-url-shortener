// Code generated by MockGen. DO NOT EDIT.
// Source: server\domain\short_link.go
//
// Generated by this command:
//
//	mockgen.exe -source=server\domain\short_link.go -destination=server\domain\mocks\short_link.go
//
// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"
	time "time"
	domain "url-shortener/domain"
	models "url-shortener/models"

	gomock "go.uber.org/mock/gomock"
)

// MockShortLinkRepository is a mock of ShortLinkRepository interface.
type MockShortLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShortLinkRepositoryMockRecorder
}

// MockShortLinkRepositoryMockRecorder is the mock recorder for MockShortLinkRepository.
type MockShortLinkRepositoryMockRecorder struct {
	mock *MockShortLinkRepository
}

// NewMockShortLinkRepository creates a new mock instance.
func NewMockShortLinkRepository(ctrl *gomock.Controller) *MockShortLinkRepository {
	mock := &MockShortLinkRepository{ctrl: ctrl}
	mock.recorder = &MockShortLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortLinkRepository) EXPECT() *MockShortLinkRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShortLinkRepository) Create(shortLink *models.ShortLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", shortLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockShortLinkRepositoryMockRecorder) Create(shortLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortLinkRepository)(nil).Create), shortLink)
}

// FindBySlashCode mocks base method.
func (m *MockShortLinkRepository) FindBySlashCode(slashCode string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlashCode", slashCode)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlashCode indicates an expected call of FindBySlashCode.
func (mr *MockShortLinkRepositoryMockRecorder) FindBySlashCode(slashCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlashCode", reflect.TypeOf((*MockShortLinkRepository)(nil).FindBySlashCode), slashCode)
}

// FindShortLinkCache mocks base method.
func (m *MockShortLinkRepository) FindShortLinkCache(slashCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortLinkCache", slashCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShortLinkCache indicates an expected call of FindShortLinkCache.
func (mr *MockShortLinkRepositoryMockRecorder) FindShortLinkCache(slashCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortLinkCache", reflect.TypeOf((*MockShortLinkRepository)(nil).FindShortLinkCache), slashCode)
}

// IncrementVisitor mocks base method.
func (m *MockShortLinkRepository) IncrementVisitor(slashCode string, visitors int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementVisitor", slashCode, visitors)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementVisitor indicates an expected call of IncrementVisitor.
func (mr *MockShortLinkRepositoryMockRecorder) IncrementVisitor(slashCode, visitors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementVisitor", reflect.TypeOf((*MockShortLinkRepository)(nil).IncrementVisitor), slashCode, visitors)
}

// SetShortLinkCache mocks base method.
func (m *MockShortLinkRepository) SetShortLinkCache(slashCode, dest string, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShortLinkCache", slashCode, dest, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShortLinkCache indicates an expected call of SetShortLinkCache.
func (mr *MockShortLinkRepositoryMockRecorder) SetShortLinkCache(slashCode, dest, exp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortLinkCache", reflect.TypeOf((*MockShortLinkRepository)(nil).SetShortLinkCache), slashCode, dest, exp)
}

// MockShortLinkUsecase is a mock of ShortLinkUsecase interface.
type MockShortLinkUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockShortLinkUsecaseMockRecorder
}

// MockShortLinkUsecaseMockRecorder is the mock recorder for MockShortLinkUsecase.
type MockShortLinkUsecaseMockRecorder struct {
	mock *MockShortLinkUsecase
}

// NewMockShortLinkUsecase creates a new mock instance.
func NewMockShortLinkUsecase(ctrl *gomock.Controller) *MockShortLinkUsecase {
	mock := &MockShortLinkUsecase{ctrl: ctrl}
	mock.recorder = &MockShortLinkUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortLinkUsecase) EXPECT() *MockShortLinkUsecaseMockRecorder {
	return m.recorder
}

// CreateShortLink mocks base method.
func (m *MockShortLinkUsecase) CreateShortLink(req *domain.CreateShortLinkRequest) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortLink", req)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortLink indicates an expected call of CreateShortLink.
func (mr *MockShortLinkUsecaseMockRecorder) CreateShortLink(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortLink", reflect.TypeOf((*MockShortLinkUsecase)(nil).CreateShortLink), req)
}

// FindBySlashCode mocks base method.
func (m *MockShortLinkUsecase) FindBySlashCode(slashCode string) (*models.ShortLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlashCode", slashCode)
	ret0, _ := ret[0].(*models.ShortLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlashCode indicates an expected call of FindBySlashCode.
func (mr *MockShortLinkUsecaseMockRecorder) FindBySlashCode(slashCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlashCode", reflect.TypeOf((*MockShortLinkUsecase)(nil).FindBySlashCode), slashCode)
}

// Redirect mocks base method.
func (m *MockShortLinkUsecase) Redirect(slashCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", slashCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockShortLinkUsecaseMockRecorder) Redirect(slashCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockShortLinkUsecase)(nil).Redirect), slashCode)
}
